#!/usr/bin/env python
# Copyright 2014 David Logie
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
"""
Usage: modtags <command> [options]

Commands:
  get                Show the value of tag for the given files
  ls                 List tags in the given files
  rm                 Remove a tag from the given files
"""
from __future__ import print_function
import os
import sys

from mutagen import File


PROGNAME = os.path.basename(sys.argv[0])


def abort(msg, retval=1):
    print("%s: %s\n" % (PROGNAME, msg), file=sys.stderr)
    sys.exit(retval)


class Command(object):

    def __init__(self):
        self.args = sys.argv[2:]

    def help(self):
        base = 'Usage: %s %s\n' % (PROGNAME, self.__doc__.strip())
        print(base, file=sys.stderr)
        sys.exit()


class GetCommand(Command):
    """
    get <tag> <file> [<file> ...]
    """
    name = 'get'

    def run(self):
        if len(self.args) < 2:
            self.help()

        tag = self.args.pop(0)
        count = 0
        max = len(self.args) - 1
        for fn in self.args:
            try:
                track = File(fn)
                value = track[tag]
            except KeyError:
                abort("Unknown tag '%s' for file '%s'" % (tag, track.filename))

            if max > 0:
                print("%s:" % track.filename)

            print(value)

            if count != max:
                print("")
                count += 1


class LsCommand(Command):
    """
    ls <file> [<file> ...]
    """
    name = 'ls'

    def run(self):
        if not self.args:
            self.help()

        count = 0
        max = len(self.args) - 1
        for fn in self.args:
            track = File(fn)

            if max > 0:
                print("%s:" % track.filename)

            for t in sorted(track.tags.keys()):
                print(t)

            if count != max:
                print("")
                count += 1


class RmCommand(Command):
    """
    rm <tag> <file> [<file> ...]
    """
    name = 'rm'

    def run(self):
        if len(self.args) < 2:
            self.help()

        tag = self.args.pop(0)
        for fn in self.args:
            try:
                track = File(fn)
                del track[tag]
            except KeyError:
                pass
            finally:
                track.save()


def main():
    # no commands or arguments, print the help message
    if len(sys.argv) <= 1 or sys.argv[1] in ('-h', '--help', 'help'):
        print(__doc__.strip(), file=sys.stderr)
        sys.exit()

    for c in Command.__subclasses__():
        if c.name == sys.argv[1]:
            command = c()
            command.run()
            sys.exit()

    # unknown command
    print(__doc__.strip(), sys.stderr)
    sys.exit(1)


if __name__ == '__main__':
    main()
