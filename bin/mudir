#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright 2014 David Logie
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
"""
Usage: mudir <dir> [<dir> ..]
"""
from __future__ import print_function
import os
import re
import sys
import unicodedata

from mutagen import File


EXTENSIONS = ['.flac', '.mp3', '.m4a', '.mp4']
REPLACEMENTS = {
    '/': '-',
    '‐': '-',
    '…': '...',
    '•': '.',
}
TAGS = {
    'artist': ['artist', 'TPE2', 'TPE1', 'aART'],
    'album': ['album', 'TALB', '\xa9alb'],
}


def munge(fn):
    fn = fn.encode('utf-8')

    # replace stuff not suitable in directories/filenames
    for k, v in REPLACEMENTS.items():
        fn = fn.replace(k, v)

    # strip leading/trailing dots
    fn = re.sub('^\.+', '', fn)
    fn = re.sub('\.+$', '', fn)

    return fn.strip().decode('utf-8')


def check_track(track):
    fn = os.path.basename(track.filename)
    current_album_dir = os.path.abspath(os.path.dirname(track.filename))
    current_album_dir = unicode(current_album_dir, 'utf-8')

    # work around OS X's odd way of storing filenames
    if os.uname()[0] == 'Darwin':
        current_album_dir = unicodedata.normalize('NFC', current_album_dir)

    current_artist_dir = os.path.dirname(current_album_dir)
    base_dir = os.path.dirname(current_artist_dir)

    artist = None
    for t in TAGS['artist']:
        try:
            artist = track[t]
            if type(artist) == list:
                artist = artist[0]
            else:
                artist = artist.text[0]
        except KeyError:
            pass

        if artist:
            new_artist_dir = os.path.join(base_dir, munge(artist))
            break

    album = None
    for t in TAGS['album']:
        try:
            album = track[t]
            if type(album) == list:
                album = album[0]
            else:
                album = album.text[0]
        except KeyError:
            pass

        if album:
            new_album_dir = os.path.join(new_artist_dir, munge(album))
            break

    if current_album_dir != new_album_dir:
        print(current_album_dir)
        print(new_album_dir)
        print()


def main(*dirs):
    for d in dirs:
        for root, _, files in os.walk(d):
            for f in files:
                ext = os.path.splitext(f)[-1].lower()
                if ext not in EXTENSIONS:
                    continue
                track = File(os.path.join(root, f))
                check_track(track)
                break


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print(__doc__.strip())
        sys.exit(1)

    main(*sys.argv[1:])
